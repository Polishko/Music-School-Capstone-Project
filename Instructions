Capstone project
Introduction
Goal:

Your task is to create a web application using HTML, CSS, and JavaScript to practice your core web development skills. You are required to avoid using JavaScript frameworks (e.g., React, Angular) or CSS frameworks (e.g., Bootstrap). The task is quite complex and may take approximately 20 hours.

﻿

Options:

You can choose one of the following projects:

Option 1: Online Learning Platform

Create a web application for an online learning platform that allows users to browse and enroll in courses. The platform should include course information such as titles, instructors, difficulty levels, and topics, along with photos. Highlight user interactions by adding features like a course list, search functionality, and tools for exploring the course catalog. The landing page should feel visually organized with responsive layouts, a gallery for presenting course-related images, and intuitive navigation. Use interactive elements such as pagination, sorting, and filtering to help users explore course data efficiently.

﻿

Option 2: Real Estate Website

Develop a web application for a real estate listing website where users can search properties available for sale or rent. The site should display detailed property information such as price, size, location, and amenities, along with photos. Enhance user experience by providing a dynamic gallery for property images, a search function to quickly find listings, and pagination to navigate between listing pages. A map should indicate the property location, making geographic information easily accessible. Ensure the layout is responsive and visually appealing on different devices.

﻿

Data and assets:

•	The data used in the application should be created by you in JSON format. There should be at least 11 items (elements), and the data must be stored locally (not fetched from external APIs).

•	Images in your project should be free for using. 

﻿

The stages you will go through as you complete the project - as well as the requirements for each stage – are described below. Carefully review all the theoretical information for each stage before starting the project.

1. Set up the project
In Progress
Start by creating a Git repository in autocode.git.epam.com. Click the "Start" button to clone a predefined template into your project space. Then, complete the following steps to set up your project:

•	Clone a repository locally. Inside the cloned repository, initialize a new project using npm. Make sure the package.json file is created correctly. If you don't know how to initialize a project, you can follow the instructions provided here.

•	In your project folder, create a .gitignore file and add node_modules to it to prevent this directory from being tracked in your Git repository.

•	Add Sass into your project and implement a "compile" script to the package.json file to handle the compilation of all .scss files into .css files. If you’re unfamiliar with how to compile .scss files into .css, please refer to the guide.

•	Add a description to a README.md file. It should contain clear instructions on how to set up and run your project, including prerequisites (e.g., npm install and Sass compilation process).


Progress:
0%
2. Web Application Development
Not Started
The second stage involves building your web application. Follow the general requirements below to structure your HTML, CSS, and JavaScript code effectively. The application should use HTML, CSS, and JavaScript to create a dynamic and user-friendly experience.

﻿

HTML & CSS part

•	Create semantic HTML markup using tags like <header>, <footer>, <article>, <nav>, <ul>, <li>, etc., for structured content organization.

•	Implement styles using Sass: utilize mixins, variables, and Sass inheritance to simplify and organize styles.

•	Apply Flexbox and/or CSS Grid layouts to arrange elements effectively.

•	The “Home” page should contain an image slider and a navigation menu:

o	Implement a submenu in the main menu using proper tags (<nav>, <ul>, <li>, <a>).

o	Ensure the menu block stretches across the available space (responsive design). If necessary, menu can be displayed on different devices in different ways.

•	Ensure the web application is responsive: use media queries to adjust layout and styles so that the design works on all devices and avoids horizontal scrolling when resizing the browser window.

﻿

JavaScript part

•	Implement a "Gallery" page that displays a set of cards featuring courses or properties (depending on the selected project option). Each card should display an image with 300 x 300 px dimensions along with all relevant information provided in the data (JSON) file. Handle varying original image sizes by ensuring proper scaling or cropping.

•	Add client-side pagination to display data page-by-page (maximum of 10 elements per page). Include navigation controls for users to access other pages. Additionally, implement asynchronous loading for elements that are initially hidden. These elements should load dynamically when the user clicks a “Show more” button.

•	Add functionality to enable sorting and filtering of data on designated pages.

•	Provide functionality to search information across the data provided.

•	Include a "Contacts" page with a map indicating a specific location. Use JavaScript to integrate a map service like Google Maps or OpenStreetMap.

﻿

Final notes

•	Ensure your web application combines HTML, CSS, and JavaScript smoothly for a functional and engaging user experience.

•	Test your application on multiple browsers and devices to ensure it works properly and looks good everywhere.

•	Write clean, well-organized code that is easy to maintain and reuse.


3. Project Compilation, Verification & Submission
Once your project is complete, take the following steps to ensure quality and submit it for evaluation:

Quality control:

Add linters: Set up ESLint for JavaScript and Stylelint for Sass/CSS to maintain consistent code quality and style.
Linting script: Add a "lint" script to your package.json to check both .js and .scss files for issues. Fix any problems detected.
Verification:

Verify that your project is fully functional. Projects that are not running or functional will not be evaluated.
Push all changes to the remote repository and ensure everything is up to date, including configurations, scripts, and the README.md file.
Double-check that the date of your last commit does not exceed the project deadline.
Submitting your project:

To receive a score for the project you need to:

Commit all your changes and ensure they are present in the remote repository.
Submit the link to your repository before the deadline in the field of the next block.
Wait for your evaluation score.
﻿

Project's link
Not Started

What should be done
*
Insert the link to your repository in the "Answer" field before the deadline (Apr-6, 23:59) .

Answer
*
Type your answer or drag and drop files here (max file size is 200 Mb)


0/28
Project's requirements
Use the tables below to evaluate the project. Requirements are divided into Set up, HTML + CSS, and JavaScript, with a total score of 100 points.

Set up requirements:

Requirement

Points

Git repository created

1

All local changes are present in the remote repository

1

Node modules are not present in the remote repository

1

All required dependencies are listed in package.json

2

"lint" script is added to package.json and all lint errors are fixed

2

A README file is created with instructions on how to set up and run the project

3

Subtotal: 10 points

﻿

HTML + CSS requirements:

Requirement

Points

HTML markup is created using semantic tags (<header>, <footer>, <article>, etc.).

3

A top menu is created for desktop view using <nav>, <ul>, <li>, and <a> tags.

3

The site’s main menu contains a submenu.

3

The “Home” page contains an image slider.

6

When resizing the browser window, the content block stretches to occupy available space.

4

The web application page is responsive across different devices and browsers.

5

No horizontal scroll bar appears when resizing the browser window.

5

Sass is used for styling (e.g., mixins, variables, inheritance) for reusable styles.	

6

Subtotal: 35 points

﻿

JavaScript requirements:

Requirement

Points

All data is stored locally in a JSON file with at least 11 elements.

5

On the "Gallery " page, there are images of 300 x 300 px, with proper scaling for different original sizes.

5

Client pagination is implemented: data is displayed page-by-page (10 elements per page) with navigation controls. Asynchronous loading works correctly for elements that are initially hidden.

15

Sorting and filtering functionality is implemented on one of the pages.

15

The search function allows users to search for specific information.

10

On the "Contacts" page, there is a map indicating the location.

5

Subtotal: 55 points

﻿

Total points: 100.
